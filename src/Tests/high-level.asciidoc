:output-dir: client-concepts/high-level

[[nest]]
= NEST - High level client

[partintro]
--
The high level client, `ElasticClient`, provides a strongly typed query DSL that maps one-to-one with the Elasticsearch query DSL.

It can be installed from the Package Manager Console inside Visual Studio using

[source, shell]
----
Install-Package NEST
----

Or by searching for https://www.nuget.org/packages/NEST[NEST] in the Package Manager GUI. 

NEST internally uses and still exposes the low level client, `ElasticLowLevelClient`, from <<elasticsearch-net,Elasticsearch.Net>> via
the `.LowLevel` property on `ElasticClient`.

There are a number of conventions that NEST uses for inference of

- <<index-name-inference, Index Names>>
- <<indices-paths, Building a URI path to one or more indices>>
- <<field-inference, Field names>> and <<property-inference, Property names>>
- <<ids-inference, Document IDs>>
- <<document-paths, Building a URI path to a document>>
- <<features-inference, API features>>

As well as a number of types for working with

- <<time-units, Time Units>>
- <<distance-units, Distance Units>>
- <<date-math-expressions, Date Math>>

And features such as

- <<auto-map, Auto Mapping C# types>>
- <<covariant-search-results, Covariant Search Results>>

--

include::{output-dir}/getting-started.asciidoc[]

[[connecting]]
== Connecting

include::client-concepts/connection/configuration-options.asciidoc[]

include::client-concepts/connection-pooling/building-blocks/connection-pooling.asciidoc[]

include::client-concepts/connection/configuring-ssl.asciidoc[]

include::client-concepts/connection/modifying-default-connection.asciidoc[]

[[serialization]]
== Serialization

:anchor-list: client-concepts/high-level/serialization

:includes-from-dirs: client-concepts/high-level/serialization

[[mapping]]
== Mapping

To interact with Elasticsearch using NEST, we need to be able to contol how POCO types in our solution
map to JSON documents and fields stored within the inverted index in Elasticsearch. This section
describes all of the different functionality available within NEST that making working with POCOs and Elasticsearch
a breeze. 

Explicitly mapping documents in Elasticsearch is crucial in providing bespoke search solutions for a given problem 
domain. Whilst Elasticsearch is able to _infer_ the mapping for a given type in an index based upon the _first_ document
of that type that it encounters, the inferred mapping is sometimes not sufficient to building a great search experience.

To explicitly control mapping, an explicit type mapping can be specified when creating an index, or added to an existing
index _before_ indexing the first document of that type (because indexing a document without an explicit mapping
will cause Elasticsearch to infer the mapping).

Here are the ways to control mapping in NEST:

- <<auto-map, Inferred mapping>>
- <<attribute-mapping, Attribute mapping>>
- <<fluent-mapping, Fluent mapping>>
- <<visitor-pattern-mapping, through the Visitor Pattern>>

as well as how to control:

- <<ignoring-properties, Ignoring properties>>
- <<multi-fields, Multi fields>>

include::client-concepts/high-level/mapping/auto-map.asciidoc[]
include::client-concepts/high-level/mapping/attribute-mapping.asciidoc[]
include::client-concepts/high-level/mapping/fluent-mapping.asciidoc[]
include::client-concepts/high-level/mapping/visitor-pattern-mapping.asciidoc[]

include::client-concepts/high-level/mapping/ignoring-properties.asciidoc[]
include::client-concepts/high-level/mapping/multi-fields.asciidoc[]


[[conventions]]
== Conventions

There are a number of conventions that NEST uses for inference of

:anchor-list: client-concepts/high-level/inference

:includes-from-dirs: client-concepts/high-level/inference

include::{output-dir}/covariant-hits/covariant-search-results.asciidoc[]

[[common-types]]
== Common Types

include::common-options/time-unit/time-units.asciidoc[]

include::common-options/distance-unit/distance-units.asciidoc[]

include::common-options/date-math/date-math-expressions.asciidoc[]

[[thrown-exceptions]]
== Exceptions
There are three categories of exceptions that may be thrown:

`ElasticsearchClientException`:: These are known exceptions, either an exception that occurred in the request pipeline
(such as max retries or timeout reached, bad authentication, etc...) or Elasticsearch itself returned an error (could
not parse the request, bad query, missing field, etc...). If it is an Elasticsearch error, the `ServerError` property
on the response will contain the the actual error that was returned.  The inner exception will always contain the
root causing exception.

`UnexpectedElasticsearchClientException`:: These are unknown exceptions, for instance a response from Elasticsearch not
properly deserialized.  These are sometimes bugs and {github}/issues[should be reported]. This exception also inherits from `ElasticsearchClientException`
so an additional catch block isn't necessary, but can be helpful in distinguishing between the two.

Development time exceptions:: These are CLR exceptions like `ArgumentException`, `ArgumentOutOfRangeException`, etc.
that are thrown when an API in the client is misused.  The `.ThrowExceptions()` setting has no bearing on these as
they will always be thrown, and also should not be handled by a consumer.

:includes-from-dirs: client-concepts/connection-pooling/exceptions