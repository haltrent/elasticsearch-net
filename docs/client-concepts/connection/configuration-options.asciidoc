:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/5.2

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/5.x/src/Tests/ClientConcepts/Connection/ConfigurationOptions.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[configuration-options]]
=== Configuration Options

Connecting to Elasticsearch with Elasticsearch.Net or NEST is easy, as demonstrated by the Getting started
documentation on the <<elasticsearch-net-getting-started, low level>> and <<nest-getting-started, high level>> clients demonstrates. 

There are a number of configuration options available on `ConnectionSettings` (and `ConnectionConfiguration` for
Elasticsearch.Net) that can be used to control how the clients interact with Elasticsearch.

==== Options on ConnectionConfiguration

The following is a list of available connection configuration options on `ConnectionConfiguration`; since`ConnectionSettings` derives from `ConnectionConfiguration`, these options are available for both 
Elasticsearch.Net and NEST:

`BasicAuthentication`::

Basic Authentication credentials to specify with all requests.

`ConnectionLimit`::

Limits the number of concurrent connections that can be opened to an endpoint. Defaults to 80.
+
For Desktop CLR, this setting applies to the DefaultConnectionLimit property on the  ServicePointManager object when creating ServicePoint objects, affecting the default `IConnection` implementation.
+
For Core CLR, this setting applies to the MaxConnectionsPerServer property on the HttpClientHandler instances used by the HttpClient inside the default `IConnection` implementation

`DeadTimeout`::

Sets the default dead timeout factor when a node has been marked dead. Some connection pools may use a flat timeout whilst others take this factor and increase it exponentially

`DisableAutomaticProxyDetection`::

Disables the automatic detection of a proxy

`DisableDirectStreaming`::

Ensures the response bytes are always available on the `ElasticsearchResponse<T>`
+
IMPORTANT: Depending on the registered serializer,             this may cause the respose to be buffered in memory first, potentially affecting performance.

`DisablePing`::

When a node is used for the very first time or when it's used for the first time after it has been marked dead a ping with a very low timeout is send to the node to make sure that when it's still dead it reports it as fast as possible. You can disable these pings globally here if you rather have it fail on the possible slower original request

`EnableHttpCompression`::

Enables gzip compressed requests and responses.
+
IMPORTANT: You need to configure http compression on Elasticsearch to be able to use this
+
http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-http.html"

`EnableHttpPipelining`::

Allows for requests to be pipelined. http://en.wikipedia.org/wiki/HTTP_pipelining
+
Note: HTTP pipelining must also be enabled in Elasticsearch for this to work properly.

`EnableTcpKeepAlive`::

Sets the keep-alive option on a TCP connection.
+
For Desktop CLR, sets ServicePointManager.SetTcpKeepAlive

`GlobalHeaders`::

A collection of headers that will be sent with every request. Useful in situations where you always need to pass a header e.g. a custom auth header

`GlobalQueryStringParameters`::

A collection of query string parameters that will be sent with every request. Useful in situations where you always need to pass a parameter e.g. an API key.

`MaxDeadTimeout`::

Sets the maximum time a node can be marked dead. Different implementations of IConnectionPool may choose a different default.

`MaximumRetries`::

The maximum number of retries for a given request,

`MaxRetryTimeout`::

Limits the total runtime including retries separately from `RequestTimeout`
+
When not specified defaults to `RequestTimeout` , which itself defaults to 60 seconds

`NodePredicate`::

Register a predicate to select which nodes that you want to execute API calls on. Note that sniffing requests omit this predicate and always execute on all nodes. When using an `IConnectionPool` implementation that supports reseeding of nodes, this will default to omitting master only node from regular API calls.             When using static or single node connection pooling it is assumed the list of node you instantiate the client with should be taken verbatim.

`OnRequestCompleted`::

Registers an `Action<T>` that is called when a response is received from Elasticsearch.             This can be useful for implementing custom logging.             Multiple callbacks can be registered by calling this multiple times

`OnRequestDataCreated`::

Registers an `Action<T>` that is called when `RequestData` is created.             Multiple callbacks can be registered by calling this multiple times

`PingTimeout`::

Sets the default ping timeout in milliseconds for ping requests, which are used to determine whether a node is alive. Pings should fail as fast as possible.

`PrettyJson`::

Forces all requests to have ?pretty=true, causing Elasticsearch to return formatted json. Also forces the client to send out formatted json. Defaults to `false`

`Proxy`::

If your connection has to go through proxy, use this method to specify the proxy url

`RequestTimeout`::

Sets the default timeout in milliseconds for each request to Elasticsearch. NOTE: You can set this to a high value here, and specify a timeout on Elasticsearch's side.

`SniffLifeSpan`::

Set the duration after which a cluster state is considered stale and a sniff should be performed again. An `IConnectionPool` has to signal it supports reseeding, otherwise sniffing will never happen.             Defaults to 1 hour.             Set to null to disable completely. Sniffing will only ever happen on ConnectionPools that return true for SupportsReseeding

`SniffOnConnectionFault`::

Enables resniffing of the cluster when a call fails, if the connection pool supports reseeding. Defaults to true

`SniffOnStartup`::

Enables sniffing on first usage of a connection pool if that pool supports reseeding. Defaults to true

`ThrowExceptions`::

Instead of following a c/go like error checking on response.IsValid always throw an exception on the client when a call resulted in an exception on either the client or the Elasticsearch server.
+
Reasons for such exceptions could be search parser errors, index missing exceptions, etc...

:xml-docs: Elasticsearch.Net:ConnectionConfiguration`1

==== Options on ConnectionSettings

The following is a list of available connection configuration options on `ConnectionSettings`:

`DefaultFieldNameInferrer`::

By default NEST camelCases property name (EmailAddress => emailAddress) expressions either via an ElasticProperty attribute or because they are part of Dictionary where the keys should be treated verbatim. Here you can register a function that transforms these expressions (default casing, pre- or suffixing)

`DefaultIndex`::

The default index to use when no index is specified.

`DefaultTypeNameInferrer`::

Allows you to override how type names should be represented, the default will call .ToLowerInvariant() on the type's name.

`MapDefaultTypeIndices`::

Map types to a index names. Takes precedence over DefaultIndex().

`PluralizeTypeNames`::

This calls SetDefaultTypenameInferrer with an implementation that will pluralize type names. This used to be the default prior to Nest 0.90

:xml-docs: Nest:ConnectionSettingsBase`1

Here's an example to demonstrate setting configuration options

[source,csharp]
----
var connectionConfiguration = new ConnectionConfiguration()
    .DisableAutomaticProxyDetection() 
    .EnableHttpCompression() 
    .DisableDirectStreaming()
    .PrettyJson()
    .RequestTimeout(TimeSpan.FromMinutes(2));

var client = new ElasticLowLevelClient(connectionConfiguration);
----

[NOTE]
====
Basic Authentication credentials can alternatively be specified on the node URI directly

[source,csharp]
----
var uri = new Uri("http://username:password@localhost:9200");
var settings = new ConnectionConfiguration(uri);
----

but this may become tedious when using connection pooling with multiple nodes. For this reason,
we'd recommend specifying it on `ConnectionSettings`.

====

[float]
=== OnRequestCompleted

You can pass a callback of type `Action<IApiCallDetails>` that can eavesdrop every time a response (good or bad) is created.
If you have complex logging needs this is a good place to add that in.

[source,csharp]
----
var counter = 0;
var client = TestClient.GetInMemoryClient(s => s.OnRequestCompleted(r => counter++));
client.RootNodeInfo();
counter.Should().Be(1);
client.RootNodeInfoAsync();
counter.Should().Be(2);
----

`OnRequestCompleted` is called even when an exception is thrown

[source,csharp]
----
var counter = 0;
var client = TestClient.GetFixedReturnClient(new { }, 500, s => s
    .ThrowExceptions()
    .OnRequestCompleted(r => counter++)
);
Assert.Throws<ElasticsearchClientException>(() => client.RootNodeInfo());
counter.Should().Be(1);
Assert.ThrowsAsync<ElasticsearchClientException>(() => client.RootNodeInfoAsync());
counter.Should().Be(2);
----

[[complex-logging]]
[float]
=== Complex logging with OnRequestCompleted

Here's an example of using `OnRequestCompleted()` for complex logging. Remember, if you would also like
to capture the request and/or response bytes, you also need to set `.DisableDirectStreaming()` to `true`

[source,csharp]
----
var list = new List<string>();
var connectionPool = new SingleNodeConnectionPool(new Uri("http://localhost:9200"));

var settings = new ConnectionSettings(connectionPool, new InMemoryConnection()) <1>
    .DefaultIndex("default-index")
    .DisableDirectStreaming()
    .OnRequestCompleted(response =>
    {
        // log out the request and the request body, if one exists for the type of request
        if (response.RequestBodyInBytes != null)
        {
            list.Add(
                $"{response.HttpMethod} {response.Uri} \n" +
                $"{Encoding.UTF8.GetString(response.RequestBodyInBytes)}");
        }
        else
        {
            list.Add($"{response.HttpMethod} {response.Uri}");
        }

        // log out the response and the response body, if one exists for the type of response
        if (response.ResponseBodyInBytes != null)
        {
            list.Add($"Status: {response.HttpStatusCode}\n" +
                     $"{Encoding.UTF8.GetString(response.ResponseBodyInBytes)}\n" +
                     $"{new string('-', 30)}\n");
        }
        else
        {
            list.Add($"Status: {response.HttpStatusCode}\n" +
                     $"{new string('-', 30)}\n");
        }
    });

var client = new ElasticClient(settings);

var syncResponse = client.Search<object>(s => s
    .AllTypes()
    .AllIndices()
    .Scroll("2m")
    .Sort(ss => ss
        .Ascending(SortSpecialField.DocumentIndexOrder)
    )
);

list.Count.Should().Be(2);

var asyncResponse = await client.SearchAsync<object>(s => s
    .AllTypes()
    .AllIndices()
    .Scroll("2m")
    .Sort(ss => ss
        .Ascending(SortSpecialField.DocumentIndexOrder)
    )
);

list.Count.Should().Be(4);
list.ShouldAllBeEquivalentTo(new[]
{
    "POST http://localhost:9200/_search?scroll=2m \n{\"sort\":[{\"_doc\":{\"order\":\"asc\"}}]}",
    "Status: 200\n------------------------------\n",
    "POST http://localhost:9200/_search?scroll=2m \n{\"sort\":[{\"_doc\":{\"order\":\"asc\"}}]}",
    "Status: 200\n------------------------------\n"
});
----
<1> Here we use `InMemoryConnection`; in reality you would use another type of `IConnection` that actually makes a request.

