:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/5.2

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/5.x/src/Tests/ClientConcepts/ConnectionPooling/Exceptions/UnrecoverableExceptions.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[unrecoverable-exceptions]]
=== Unrecoverable exceptions 

Unrecoverable exceptions are _excepted_ exceptions that are grounds to exit the client pipeline immediately. 
By default, the client won't throw on any `ElasticsearchClientException` but instead return an invalid response 
which can be detected by checking `.IsValid` on the response.

You can configure the client to throw using `ThrowExceptions()` on `ConnectionSettings`. The following test
both a client that throws and one that returns an invalid response with an `.OriginalException` exposed 

The following are recoverable exceptions 

[source,csharp]
----
var recoverablExceptions = new[]
{
    new PipelineException(PipelineFailure.BadResponse),
    new PipelineException(PipelineFailure.PingFailure),
};

recoverablExceptions.Should().OnlyContain(e => e.Recoverable);
----

and the unrecoverable exceptions 

[source,csharp]
----
var unrecoverableExceptions = new[]
{
    new PipelineException(PipelineFailure.CouldNotStartSniffOnStartup),
    new PipelineException(PipelineFailure.SniffFailure),
    new PipelineException(PipelineFailure.Unexpected),
    new PipelineException(PipelineFailure.BadAuthentication),
    new PipelineException(PipelineFailure.MaxRetriesReached),
    new PipelineException(PipelineFailure.MaxTimeoutReached)
};

unrecoverableExceptions.Should().OnlyContain(e => !e.Recoverable);
----

As an example, let's set up a 10 node cluster that will always succeed when pinged but
			will fail with a 401 response when making client calls

[source,csharp]
----
var audit = new Auditor(() => Framework.Cluster
    .Nodes(10)
    .Ping(r => r.SucceedAlways())
    .ClientCalls(r => r.FailAlways(401))
    .StaticConnectionPool()
    .AllDefaults()
);
----

Here we make a client call and determine that the first audit event was a successful ping, 
followed by a bad response as a result of a bad authentication response

[source,csharp]
----
audit = await audit.TraceElasticsearchException(
    new ClientCall {
        { AuditEvent.PingSuccess, 9200 },
        { AuditEvent.BadResponse, 9200 },
    },
    (e) =>
    {
        e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);
    }
);

var audit = new Auditor(() => Framework.Cluster
    .Nodes(10)
    .Ping(r => r.SucceedAlways())
    .ClientCalls(r => r.FailAlways(401).ReturnResponse(HtmlNginx401Response))
    .StaticConnectionPool()
    .AllDefaults()
);

audit = await audit.TraceElasticsearchException(
    new ClientCall {
        { AuditEvent.PingSuccess, 9200 },
        { AuditEvent.BadResponse, 9200 },
    },
    (e) =>
    {
        e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);
        e.Response.HttpStatusCode.Should().Be(401);
        e.Response.ResponseBodyInBytes.Should().BeNull();
    }
);

var audit = new Auditor(() => Framework.Cluster
    .Nodes(10)
    .Ping(r => r.SucceedAlways())
    .ClientCalls(r => r.FailAlways(401).ReturnResponse(HtmlNginx401Response))
    .StaticConnectionPool()
    .Settings(s=>s.DisableDirectStreaming())
);

audit = await audit.TraceElasticsearchException(
    new ClientCall {
        { AuditEvent.PingSuccess, 9200 },
        { AuditEvent.BadResponse, 9200 },
    },
    (e) =>
    {
        e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);
        e.Response.HttpStatusCode.Should().Be(401);
        e.Response.ResponseBodyInBytes.Should().NotBeNull();
        var responseString = Encoding.UTF8.GetString(e.Response.ResponseBodyInBytes);
        responseString.Should().Contain("nginx/");
        e.DebugInformation.Should().Contain("nginx/");
    }
);

var audit = new Auditor(() => Framework.Cluster
    .Nodes(10)
    .Ping(r => r.SucceedAlways())
    .ClientCalls(r => r.FailAlways(401).ReturnResponse(HtmlNginx401Response))
    .StaticConnectionPool()
    .Settings(s=>s.DisableDirectStreaming().DefaultIndex("default-index"))
    .ClientProxiesTo(
        (c, r) => c.Get<Project>("1", s=>s.RequestConfiguration(r)),
        async (c, r) => await c.GetAsync<Project>("1", s=>s.RequestConfiguration(r)) as IResponse
    )
);

audit = await audit.TraceElasticsearchException(
    new ClientCall {
        { AuditEvent.PingSuccess, 9200 },
        { AuditEvent.BadResponse, 9200 },
    },
    (e) =>
    {
        e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);
        e.Response.HttpStatusCode.Should().Be(401);
        e.Response.ResponseBodyInBytes.Should().NotBeNull();
        var responseString = Encoding.UTF8.GetString(e.Response.ResponseBodyInBytes);
        responseString.Should().Contain("nginx/");
        e.DebugInformation.Should().Contain("nginx/");
    }
);
----

