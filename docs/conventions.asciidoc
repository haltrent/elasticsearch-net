:output-dir: client-concepts/connection-pooling

:building-blocks: {output-dir}/building-blocks

:sniffing: {output-dir}/sniffing

:pinging: {output-dir}/pinging

:round-robin: {output-dir}/round-robin

:failover: {output-dir}/failover

:max-retries: {output-dir}/max-retries

:request-overrides: {output-dir}/request-overrides

[[api-conventions]]
= API Conventions

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/5.x/src/Tests/conventions.asciidoc. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[partintro]
--
Conventions that apply to both Elasticsearch.Net and NEST

--

include::client-concepts/low-level/lifetimes.asciidoc[]

[[thrown-exceptions]]
== Exceptions

There are three categories of exceptions that may be thrown:

`ElasticsearchClientException`::

These are known exceptions, either an exception that occurred in the request pipeline
(such as max retries or timeout reached, bad authentication, etc.) or Elasticsearch itself returned an error (could
not parse the request, bad query, missing field, etc.). If it is an Elasticsearch error, the `ServerError` property
on the response will contain the the actual error that was returned.  The inner exception will always contain the
root causing exception.

`UnexpectedElasticsearchClientException`::

These are unknown exceptions, for instance a response from Elasticsearch not
properly deserialized.  These are sometimes bugs and {github}/issues[should be reported]. This exception also inherits from `ElasticsearchClientException`
so an additional catch block isn't necessary, but can be helpful in distinguishing between the two.

Development time exceptions::

These are CLR exceptions like `ArgumentException`, `ArgumentOutOfRangeException`, etc.
that are thrown when an API in the client is misused.  The `.ThrowExceptions()` setting has no bearing on these as
they will always be thrown, and also should not be handled by a consumer.

:includes-from-dirs: client-concepts/connection-pooling/exceptions

include::client-concepts/connection-pooling/exceptions/unexpected-exceptions.asciidoc[]

include::client-concepts/connection-pooling/exceptions/unrecoverable-exceptions.asciidoc[]

[[transports-and-pipelines]]
== Transports and pipelines

include::{building-blocks}/request-pipelines.asciidoc[]

include::{building-blocks}/transports.asciidoc[]

include::{building-blocks}/date-time-providers.asciidoc[]

include::{building-blocks}/keeping-track-of-nodes.asciidoc[]

[[request-behaviour]]
== Request behaviour

include::{sniffing}/on-startup.asciidoc[]

include::{sniffing}/on-connection-failure.asciidoc[]

include::{sniffing}/on-stale-cluster-state.asciidoc[]

include::{sniffing}/role-detection.asciidoc[]

include::{pinging}/first-usage.asciidoc[]

include::{pinging}/revival.asciidoc[]

include::{round-robin}/round-robin.asciidoc[]

include::{round-robin}/skip-dead-nodes.asciidoc[]

include::{round-robin}/volatile-updates.asciidoc[]

include::{failover}/falling-over.asciidoc[]

include::{max-retries}/respects-max-retry.asciidoc[]

include::{request-overrides}/disable-sniff-ping-per-request.asciidoc[]

include::{request-overrides}/request-timeouts-overrides.asciidoc[]

include::{request-overrides}/respects-max-retry-overrides.asciidoc[]

include::{request-overrides}/respects-allowed-status-code.asciidoc[]

include::{request-overrides}/respects-force-node.asciidoc[]

