:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/5.2

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/5.x/src/Tests/Aggregations/Bucket/Terms/TermsAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[terms-aggregation-usage]]
=== Terms Aggregation Usage

==== Fluent DSL Example

[source,csharp]
----
s => s
.Size(0)
.Aggregations(a => a
    .Terms("states", st => st
        .Field(p => p.State)
        .MinimumDocumentCount(2)
        .Size(5)
        .ShardSize(100)
        .ExecutionHint(TermsAggregationExecutionHint.Map)
        .Missing("n/a")
        .Script(ss => ss.Inline("'State of Being: '+_value").Lang("groovy"))
        .Order(TermsOrder.TermAscending)
        .Order(TermsOrder.CountDescending)
        .Meta(m => m
            .Add("foo", "bar")
        )
    )
)
----

==== Object Initializer Syntax Example

[source,csharp]
----
new SearchRequest<Project>
{
    Size = 0,
    Aggregations = new TermsAggregation("states")
    {
        Field = Field<Project>(p => p.State),
        MinimumDocumentCount = 2,
        Size = 5,
        ShardSize = 100,
        ExecutionHint = TermsAggregationExecutionHint.Map,
        Missing = "n/a",
        Script = new InlineScript("'State of Being: '+_value") { Lang = "groovy" },
        Order = new List<TermsOrder>
        {
            TermsOrder.TermAscending,
            TermsOrder.CountDescending
        },
        Meta = new Dictionary<string, object>
        {
            { "foo", "bar" }
        }
    }
}
----

[source,javascript]
.Example json output
----
{
  "size": 0,
  "aggs": {
    "states": {
      "meta": {
        "foo": "bar"
      },
      "terms": {
        "field": "state",
        "min_doc_count": 2,
        "size": 5,
        "shard_size": 100,
        "execution_hint": "map",
        "missing": "n/a",
        "script": {
          "inline": "'State of Being: '+_value",
          "lang": "groovy"
        },
        "order": [
          {
            "_term": "asc"
          },
          {
            "_count": "desc"
          }
        ]
      }
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.IsValid.Should().BeTrue();
var states = response.Aggs.Terms("states");
states.Should().NotBeNull();
states.DocCountErrorUpperBound.Should().HaveValue();
states.SumOtherDocCount.Should().HaveValue();
states.Buckets.Should().NotBeNull();
states.Buckets.Count.Should().BeGreaterThan(0);
foreach (var item in states.Buckets)
{
    item.Key.Should().NotBeNullOrEmpty();
    item.DocCount.Should().BeGreaterOrEqualTo(1);
}
states.Meta.Should().NotBeNull().And.HaveCount(1);
states.Meta["foo"].Should().Be("bar");
----

==== Fluent DSL Example

[source,csharp]
----
s => s
.Size(0)
.Aggregations(a => a
    .Terms("commits", st => st
        .Field(p => p.NumberOfCommits)
    )
)
----

==== Object Initializer Syntax Example

[source,csharp]
----
new SearchRequest<Project>
{
    Size = 0,
    Aggregations = new TermsAggregation("commits")
    {
        Field = Infer.Field<Project>(p => p.NumberOfCommits),
    }
}
----

[source,javascript]
.Example json output
----
{
  "size": 0,
  "aggs": {
    "commits": {
      "terms": {
        "field": "numberOfCommits"
      }
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.IsValid.Should().BeTrue();
var commits = response.Aggs.Terms<int>("commits");
commits.Should().NotBeNull();
commits.DocCountErrorUpperBound.Should().HaveValue();
commits.SumOtherDocCount.Should().HaveValue();
commits.Buckets.Should().NotBeNull();
commits.Buckets.Count.Should().BeGreaterThan(0);
foreach (var item in commits.Buckets)
{
    item.Key.Should().BeGreaterThan(0);
    item.DocCount.Should().BeGreaterOrEqualTo(1);
}
----

==== Fluent DSL Example

[source,csharp]
----
s => s
.Size(0)
.Aggregations(a => a
    .Terms("commits", st => st
        .Field(p => p.NumberOfCommits)
        .Include(partion: 0, numberOfPartitions: 50)
        .Size(2)
    )
)
----

==== Object Initializer Syntax Example

[source,csharp]
----
new SearchRequest<Project>
{
    Size = 0,
    Aggregations = new TermsAggregation("commits")
    {
        Field = Infer.Field<Project>(p => p.NumberOfCommits),
        Include = new TermsIncludeExclude
        {
            Partition = 0,
            NumberOfPartitions = 50
        },
        Size = 2
    }
}
----

[source,javascript]
.Example json output
----
{
  "size": 0,
  "aggs": {
    "commits": {
      "terms": {
        "field": "numberOfCommits",
        "size": 2,
        "include": {
          "partition": 0,
          "num_partitions": 50
        }
      }
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.IsValid.Should().BeTrue();
var commits = response.Aggs.Terms<int>("commits");
commits.Should().NotBeNull();
commits.DocCountErrorUpperBound.Should().HaveValue();
commits.SumOtherDocCount.Should().HaveValue();
commits.Buckets.Should().NotBeNull();
commits.Buckets.Count.Should().BeGreaterThan(0);
foreach (var item in commits.Buckets)
{
    item.Key.Should().BeGreaterThan(0);
    item.DocCount.Should().BeGreaterOrEqualTo(1);
}
----

